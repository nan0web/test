import { before, describe, it } from "node:test"
import assert from "node:assert"
import FS from "@nan0web/db-fs"

const fs = new FS()

describe("Generate docs.api.json", () => {
	before(async () => {
		await fs.connect()
	})

	it.todo("must be generated by `pnpm test`, the same way as `README.md` generates", async () => {
		const stat = await fs.statDocument("docs/api.json")
		assert.ok(stat.exists)
	})

	it.todo("should have a valid JSON structure", async () => {
		const parsed = await fs.loadDocument("docs/api.json", {})
		assert.ok(parsed)

		// Check that it has expected structure
		assert.ok(Array.isArray(parsed))
		assert.ok(parsed.length > 0)
		assert.ok(parsed[0].name)
		assert.ok(parsed[0].description)
	})

	it.todo("The `docs/api.json` file must include all public APIs with their descriptions, examples and parameters", async () => {
		const apiDocs = await fs.loadDocument("docs/api.json", {})
		// Verify structure of API documentation entries
		apiDocs.forEach(api => {
			assert.ok(api.name, 'API should have a name')
			assert.ok(api.description, 'API should have a description')
			assert.ok(api.examples, 'API should have examples')
			assert.ok(api.parameters, 'API should have parameters')
		})
	})

	it.todo("The file must be generated during `pnpm test` by extracting the documented test examples", async () => {
		const apiDocs = await fs.loadDocument("docs/api.json")

		// Verify that APIs from tests are documented
		const apiNames = apiDocs.map(api => api.name)
		assert.ok(apiNames.includes('mockFetch'), 'mockFetch should be documented')
		assert.ok(apiNames.includes('MemoryDB'), 'MemoryDB should be documented')
		assert.ok(apiNames.includes('runSpawn'), 'runSpawn should be documented')
	})
})
